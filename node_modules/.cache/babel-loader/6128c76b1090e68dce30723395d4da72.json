{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alvar\\\\OneDrive\\\\Proyectos\\\\TestBanco\\\\proyectoclima\\\\produccion\\\\src\\\\Components\\\\LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport '../assets/css/grafica.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LineChart = () => {\n  _s();\n\n  const d3Chart = useRef();\n  const parseDate = d3.timeParse('%Y-%m-%d');\n  useEffect(() => {\n    fetch('https://data.cityofnewyork.us/resource/tg4x-b46p.json').then(response => response.json()).then(data => {\n      // Transform data\n      const permits = data.filter(event => {\n        return event.eventtype === 'Shooting Permit';\n      }); // Get all the dates in an array\n\n      const dates = [...new Set(permits.map(each => each.enteredon.slice(0, 10)))];\n      let CountsByDate = []; // Get counts(number of times a permit entered) on each date\n\n      dates.map(time => {\n        let date = time;\n        let count = 0;\n        permits.map(each => {\n          let timestamp = each.enteredon.slice(0, 10);\n\n          if (timestamp === date) {\n            count += 1;\n          }\n        });\n        const counts = {\n          date: parseDate(date),\n          count: count\n        };\n        CountsByDate.push(counts);\n      });\n      console.log(CountsByDate);\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 30,\n        left: 30\n      };\n      const width = parseInt(d3.select('#d3demo').style('width')) - margin.left - margin.right;\n      const height = parseInt(d3.select('#d3demo').style('height')) - margin.top - margin.bottom; // Set up chart\n\n      const svg = d3.select(d3Chart.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); // x axis scale \n\n      const x = d3.scaleTime().domain(d3.extent(CountsByDate, function (d) {\n        return d.date;\n      })).range([0, width]);\n      svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)); // Get the max value of counts\n\n      const max = d3.max(CountsByDate, function (d) {\n        return d.count;\n      }); // y axis scale \n\n      const y = d3.scaleLinear().domain([0, max]).range([height, 0]);\n      svg.append('g').call(d3.axisLeft(y)); // Draw line\n\n      svg.append('path').datum(CountsByDate).attr('fill', 'none').attr('stroke', 'white').attr('stroke-width', 3).attr('d', d3.line().x(function (d) {\n        return x(d.date);\n      }).y(function (d) {\n        return y(d.count);\n      })); // Add title \n\n      svg.append('text').attr('x', width / 2).attr('y', margin.top / 5 - 10).attr('text-anchor', 'middle').attr('font-size', '16px').attr('fill', 'white').text('New York City Film Permits entered in 2020 - Shooting Permit');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"d3demo\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: d3Chart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n};\n\n_s(LineChart, \"UZaK9swYa4puou/ZTg3GMr5EMOQ=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["C:/Users/alvar/OneDrive/Proyectos/TestBanco/proyectoclima/produccion/src/Components/LineChart.js"],"names":["React","useEffect","useRef","d3","LineChart","d3Chart","parseDate","timeParse","fetch","then","response","json","data","permits","filter","event","eventtype","dates","Set","map","each","enteredon","slice","CountsByDate","time","date","count","timestamp","counts","push","console","log","margin","top","right","bottom","left","width","parseInt","select","style","height","svg","current","attr","append","x","scaleTime","domain","extent","d","range","call","axisBottom","max","y","scaleLinear","axisLeft","datum","line","text"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport '../assets/css/grafica.css'\r\n\r\nconst LineChart = () => {\r\n\r\n\tconst d3Chart = useRef()\r\n\r\n\tconst parseDate = d3.timeParse('%Y-%m-%d')\r\n\r\n\tuseEffect(()=>{\r\n\t\tfetch('https://data.cityofnewyork.us/resource/tg4x-b46p.json')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data=>{\r\n\r\n\t\t\t\t// Transform data\r\n\t\t\t\tconst permits = data.filter(event => {\r\n\t\t\t\t\treturn event.eventtype === 'Shooting Permit'\r\n\t\t\t\t}) \r\n\r\n\t\t\t\t// Get all the dates in an array\r\n\t\t\t\tconst dates = [...new Set(permits.map(each=>each.enteredon.slice(0,10)))]\r\n\r\n\t\t\t\tlet CountsByDate = []\r\n\r\n\t\t\t\t// Get counts(number of times a permit entered) on each date\r\n\t\t\t\tdates.map(time=>{\r\n\t\t\t\t\tlet date = time\r\n\t\t\t\t\tlet count = 0\r\n\r\n\t\t\t\t\tpermits.map(each=>{\r\n\t\t\t\t\t\tlet timestamp = each.enteredon.slice(0,10)\r\n\t\t\t\t\t\tif(timestamp === date) {count+=1}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tconst counts = {date:parseDate(date), count:count}\r\n\r\n\t\t\t\t\tCountsByDate.push(counts)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconsole.log(CountsByDate)\r\n\r\n\t\t\t\tconst margin = {top: 20, right: 30, bottom: 30, left: 30}\r\n\t\t\t\tconst width = parseInt(d3.select('#d3demo').style('width')) - margin.left - margin.right\r\n\t\t\t\tconst height = parseInt(d3.select('#d3demo').style('height')) - margin.top - margin.bottom\r\n\r\n\t\t\t\t// Set up chart\r\n\t\t\t\tconst svg = d3.select(d3Chart.current)\r\n\t\t\t\t\t\t\t\t.attr('width', width + margin.left + margin.right)\r\n\t\t\t\t\t\t\t\t.attr('height', height + margin.top + margin.bottom)\r\n\t\t\t\t\t\t\t\t.append('g')\r\n\t\t\t\t\t\t\t\t\t.attr('transform', 'translate('+ margin.left + ',' + margin.top + ')');\r\n\r\n\t\t\t\t// x axis scale \r\n\t\t\t\tconst x = d3.scaleTime()\r\n\t\t\t\t\t\t\t.domain(d3.extent(CountsByDate, function(d){return d.date}))\r\n\t\t\t\t\t\t\t.range([0,width])\r\n\r\n\t\t\t\tsvg.append('g')\r\n\t\t\t\t\t.attr('transform', 'translate(0,' + height + ')')\r\n\t\t\t\t\t.call(d3.axisBottom(x))\r\n\r\n\t\t\t\t// Get the max value of counts\r\n\t\t\t\tconst max = d3.max(CountsByDate, function(d){return d.count})\r\n\r\n\t\t\t\t// y axis scale \r\n\t\t\t\tconst y = d3.scaleLinear()\r\n\t\t\t\t\t\t\t.domain([0, max])\r\n\t\t\t\t\t\t\t.range([height,0])\r\n\r\n\t\t\t\tsvg.append('g')\r\n\t\t\t\t\t.call(d3.axisLeft(y))\r\n\r\n\r\n\t\t\t\t// Draw line\r\n\t\t\t\tsvg.append('path')\r\n\t\t\t\t\t.datum(CountsByDate)\r\n\t\t\t\t\t.attr('fill', 'none')\r\n\t\t\t\t\t.attr('stroke','white')\r\n\t\t\t\t\t.attr('stroke-width', 3)\r\n\t\t\t\t\t.attr('d', d3.line()\r\n\t\t\t\t\t\t\t\t.x(function(d){return x(d.date)})\r\n\t\t\t\t\t\t\t\t.y(function(d){return y(d.count)})\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t// Add title \r\n\t\t\t\tsvg.append('text')\r\n\t\t\t\t\t.attr('x',(width/2))\r\n\t\t\t\t\t.attr('y', (margin.top/5 - 10))\r\n\t\t\t\t\t.attr('text-anchor', 'middle')\r\n\t\t\t\t\t.attr('font-size', '16px')\r\n\t\t\t\t\t.attr('fill','white')\r\n\t\t\t\t\t.text('New York City Film Permits entered in 2020 - Shooting Permit')\r\n\t\t\t})\r\n\t},[])\r\n\r\n\treturn (\r\n\t\t<div id='d3demo'>\r\n\t\t\t<svg ref={d3Chart}></svg>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}